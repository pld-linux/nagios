--- nagios-2.0b3/sample-config/nagios.cfg.in	2005-03-11 03:16:37.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/nagios.cfg.in	2005-05-04 14:24:24.000000000 +0300
@@ -13,10 +13,10 @@
 
 # LOG FILE
 # This is the main log file where service and host events are logged
-# for historical purposes.  This should be the first option specified 
+# for historical purposes.  This should be the first option specified
 # in the config file!!!
 
-log_file=@localstatedir@/nagios.log
+log_file=/var/log/nagios/nagios.log
 
 
 
@@ -27,7 +27,7 @@
 # reasons it isn't.  You can split object definitions into several
 # different config files by using multiple cfg_file statements here.
 # Nagios will read and process all the config files you define.
-# This can be very useful if you want to keep command definitions 
+# This can be very useful if you want to keep command definitions
 # separate from host and contact definitions...
 
 # Plugin commands (service and host check commands)
@@ -43,21 +43,21 @@
 # config files if you wish (as done here), or keep them all in a
 # single config file.
 
-cfg_file=@sysconfdir@/minimal.cfg
+#cfg_file=@sysconfdir@/minimal.cfg
 
-#cfg_file=@sysconfdir@/contactgroups.cfg
-#cfg_file=@sysconfdir@/contacts.cfg
-#cfg_file=@sysconfdir@/dependencies.cfg
-#cfg_file=@sysconfdir@/escalations.cfg
-#cfg_file=@sysconfdir@/hostgroups.cfg
-#cfg_file=@sysconfdir@/hosts.cfg
-#cfg_file=@sysconfdir@/services.cfg
-#cfg_file=@sysconfdir@/timeperiods.cfg
+cfg_file=@sysconfdir@/contactgroups.cfg
+cfg_file=@sysconfdir@/contacts.cfg
+cfg_file=@sysconfdir@/dependencies.cfg
+cfg_file=@sysconfdir@/escalations.cfg
+cfg_file=@sysconfdir@/hostgroups.cfg
+cfg_file=@sysconfdir@/hosts.cfg
+cfg_file=@sysconfdir@/services.cfg
+cfg_file=@sysconfdir@/timeperiods.cfg
 
 # Extended host/service info definitions are now stored along with
 # other object definitions:
-#cfg_file=@sysconfdir@/hostextinfo.cfg
-#cfg_file=@sysconfdir@/serviceextinfo.cfg
+cfg_file=@sysconfdir@/hostextinfo.cfg
+cfg_file=@sysconfdir@/serviceextinfo.cfg
 
 # You can also tell Nagios to process all config files (with a .cfg
 # extension) in a particular directory by using the cfg_dir
@@ -72,7 +72,7 @@
 
 # OBJECT CACHE FILE
 # This option determines where object definitions are cached when
-# Nagios starts/restarts.  The CGIs read object definitions from 
+# Nagios starts/restarts.  The CGIs read object definitions from
 # this cache file (rather than looking at the object config files
 # directly) in order to prevent inconsistencies that can occur
 # when the config files are modified after Nagios starts.
@@ -105,7 +105,7 @@
 
 
 # NAGIOS USER
-# This determines the effective user that Nagios should run as.  
+# This determines the effective user that Nagios should run as.
 # You can either supply a username or a UID.
 
 nagios_user=@nagios_user@
@@ -113,7 +113,7 @@
 
 
 # NAGIOS GROUP
-# This determines the effective group that Nagios should run as.  
+# This determines the effective group that Nagios should run as.
 # You can either supply a group name or a GID.
 
 nagios_group=@nagios_grp@
@@ -128,7 +128,7 @@
 # you will have to enable this.  Setting this value to 0 disables command
 # checking (the default), other values enable it.
 
-check_external_commands=0
+check_external_commands=1
 
 
 
@@ -139,7 +139,7 @@
 # Nagios to check for external commands every minute.  If you specify a
 # number followed by an "s" (i.e. 15s), this will be interpreted to mean
 # actual seconds rather than a multiple of the interval_length variable.
-# Note: In addition to reading the external command file at regularly 
+# Note: In addition to reading the external command file at regularly
 # scheduled intervals, Nagios will also check for external commands after
 # event handlers are executed.
 # NOTE: Setting this value to -1 causes Nagios to check the external
@@ -155,7 +155,7 @@
 # This is the file that Nagios checks for external command requests.
 # It is also where the command CGI will write commands that are submitted
 # by users, so it must be writeable by the user that the web server
-# is running as (usually 'nobody').  Permissions should be set at the 
+# is running as (usually 'nobody').  Permissions should be set at the
 # directory level instead of on the file, as the file is deleted every
 # time its contents are processed.
 
@@ -237,10 +237,10 @@
 
 
 # LOG ARCHIVE PATH
-# This is the directory where archived (rotated) log files should be 
+# This is the directory where archived (rotated) log files should be
 # placed (assuming you've chosen to do log rotation).
 
-log_archive_path=@localstatedir@/archives
+log_archive_path=/var/log/nagios/archives
 
 
 
@@ -400,7 +400,7 @@
 
 
 # MAXIMUM CONCURRENT SERVICE CHECKS
-# This option allows you to specify the maximum number of 
+# This option allows you to specify the maximum number of
 # service checks that can be run in parallel at any given time.
 # Specifying a value of 1 for this variable essentially prevents
 # any service checks from being parallelized.  A value of 0
@@ -424,7 +424,7 @@
 # This option determines whether or not Nagios will attempt to
 # automatically reschedule active host and service checks to
 # "smooth" them out over time.  This can help balance the load on
-# the monitoring server.  
+# the monitoring server.
 # WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE
 # PERFORMANCE, RATHER THAN INCREASE IT, IF USED IMPROPERLY
 
@@ -488,7 +488,7 @@
 # This setting determines whether or not Nagios will save state
 # information for services and hosts before it shuts down.  Upon
 # startup Nagios will reload all saved service and host state
-# information before starting to monitor.  This is useful for 
+# information before starting to monitor.  This is useful for
 # maintaining long-term data on state statistics, etc, but will
 # slow Nagios down a bit when it (re)starts.  Since its only
 # a one-time penalty, I think its well worth the additional
@@ -500,7 +500,7 @@
 
 # STATE RETENTION FILE
 # This is the file that Nagios should use to store host and
-# service state information before it shuts down.  The state 
+# service state information before it shuts down.  The state
 # information in this file is also read immediately prior to
 # starting to monitor the network when Nagios is restarted.
 # This file is used only if the preserve_state_information
@@ -523,7 +523,7 @@
 
 
 # USE RETAINED PROGRAM STATE
-# This setting determines whether or not Nagios will set 
+# This setting determines whether or not Nagios will set
 # program status variables based on the values saved in the
 # retention file.  If you want to use retained program status
 # information, set this value to 1.  If not, set this value
@@ -567,7 +567,7 @@
 
 # SERVICE CHECK EXECUTION OPTION
 # This determines whether or not Nagios will actively execute
-# service checks when it initially starts.  If this option is 
+# service checks when it initially starts.  If this option is
 # disabled, checks are not actively made, but Nagios can still
 # receive and process passive check results that come in.  Unless
 # you're implementing redundant hosts or have a special need for
@@ -589,7 +589,7 @@
 
 # HOST CHECK EXECUTION OPTION
 # This determines whether or not Nagios will actively execute
-# host checks when it initially starts.  If this option is 
+# host checks when it initially starts.  If this option is
 # disabled, checks are not actively made, but Nagios can still
 # receive and process passive check results that come in.  Unless
 # you're implementing redundant hosts or have a special need for
@@ -646,7 +646,7 @@
 # These commands are run after every host and service check is
 # performed.  These commands are executed only if the
 # enable_performance_data option (above) is set to 1.  The command
-# argument is the short name of a command definition that you 
+# argument is the short name of a command definition that you
 # define in your host configuration file.  Read the HTML docs for
 # more information on performance data.
 
@@ -726,7 +726,7 @@
 # OBSESSIVE COMPULSIVE SERVICE PROCESSOR COMMAND
 # This is the command that is run for every service check that is
 # processed by Nagios.  This command is executed only if the
-# obsess_over_service option (above) is set to 1.  The command 
+# obsess_over_service option (above) is set to 1.  The command
 # argument is the short name of a command definition that you
 # define in your host configuration file. Read the HTML docs for
 # more information on implementing distributed monitoring.
@@ -736,9 +736,9 @@
 
 
 # ORPHANED SERVICE CHECK OPTION
-# This determines whether or not Nagios will periodically 
+# This determines whether or not Nagios will periodically
 # check for orphaned services.  Since service checks are not
-# rescheduled until the results of their previous execution 
+# rescheduled until the results of their previous execution
 # instance are processed, there exists a possibility that some
 # checks may never get rescheduled.  This seems to be a rare
 # problem and should not happen under normal circumstances.
@@ -791,7 +791,7 @@
 
 
 # AGGREGATED STATUS UPDATES
-# This option determines whether or not Nagios will 
+# This option determines whether or not Nagios will
 # aggregate updates of host, service, and program status
 # data.  Normally, status data is updated immediately when
 # a change occurs.  This can result in high CPU loads if
@@ -807,7 +807,7 @@
 # AGGREGATED STATUS UPDATE INTERVAL
 # Combined with the aggregate_status_updates option,
 # this option determines the frequency (in seconds!) that
-# Nagios will periodically dump program, host, and 
+# Nagios will periodically dump program, host, and
 # service status data.  If you are not using aggregated
 # status data updates, this option has no effect.
 
@@ -817,9 +817,9 @@
 
 # FLAP DETECTION OPTION
 # This option determines whether or not Nagios will try
-# and detect hosts and services that are "flapping".  
+# and detect hosts and services that are "flapping".
 # Flapping occurs when a host or service changes between
-# states too frequently.  When Nagios detects that a 
+# states too frequently.  When Nagios detects that a
 # host or service is flapping, it will temporarily supress
 # notifications for that host/service until it stops
 # flapping.  Flap detection is very experimental, so read
@@ -852,7 +852,7 @@
 #	strict-iso8601	(YYYY-MM-DDTHH:MM:SS)
 #
 
-date_format=us
+date_format=iso8601
 
 
 
@@ -871,8 +871,7 @@
 # object types.
 
 illegal_object_name_chars=`~!$%^&*|'"<>?,()=
-
-
+#'
 
 # ILLEGAL MACRO OUTPUT CHARACTERS
 # This option allows you to specify illegal characters that are
@@ -890,6 +889,7 @@
 #	$SERVICEACKCOMMENT$
 
 illegal_macro_output_chars=`~$&|'"<>
+#'
 
 
 
@@ -905,7 +905,7 @@
 
 
 # "TRUE" REGULAR EXPRESSION MATCHING
-# This option controls whether or not "true" regular expression 
+# This option controls whether or not "true" regular expression
 # matching takes place in the object config files.  This option
 # only has an effect if regular expression matching is enabled
 # (see above).  If this option is DISABLED, regular expression
--- nagios-2.0b3/sample-config/cgi.cfg.in	2003-10-10 03:18:25.000000000 +0300
+++ nagios-2.0b3.fuu/sample-config/cgi.cfg.in	2005-05-04 14:24:24.000000000 +0300
@@ -43,7 +43,7 @@
 # Values: 0 = disables context-sensitive help
 #         1 = enables context-sensitive help
 
-show_context_help=0
+show_context_help=1
 
 
 
@@ -67,9 +67,9 @@
 
 
 # AUTHENTICATION USAGE
-# This option controls whether or not the CGIs will use any 
+# This option controls whether or not the CGIs will use any
 # authentication when displaying host and service information, as
-# well as committing commands to Nagios for processing.  
+# well as committing commands to Nagios for processing.
 #
 # Read the HTML documentation to learn how the authorization works!
 #
@@ -92,7 +92,7 @@
 # access pages without authentication.  This allows people within a
 # secure domain (i.e., behind a firewall) to see the current status
 # without authenticating.  You may want to use this to avoid basic
-# authentication if you are not using a sercure server since basic
+# authentication if you are not using a secure server since basic
 # authentication transmits passwords in the clear.
 #
 # Important:  Do not define a default username unless you are
@@ -100,7 +100,7 @@
 # access to the CGIs has been authenticated in some manner!  If you
 # define this variable, anyone who has not authenticated to the web
 # server will inherit all rights you assign to this user!
- 
+
 #default_user_name=guest
 
 
@@ -113,7 +113,7 @@
 # not use authorization.  You may use an asterisk (*) to
 # authorize any user who has authenticated to the web server.
 
-#authorized_for_system_information=nagiosadmin,theboss,jdoe
+authorized_for_system_information=*
 
 
 
@@ -125,7 +125,7 @@
 # an asterisk (*) to authorize any user who has authenticated
 # to the web server.
 
-#authorized_for_configuration_information=nagiosadmin,jdoe
+authorized_for_configuration_information=*
 
 
 
@@ -138,7 +138,7 @@
 # You may use an asterisk (*) to authorize any user who has
 # authenticated to the web server.
 
-#authorized_for_system_commands=nagiosadmin
+authorized_for_system_commands=*
 
 
 
@@ -151,30 +151,30 @@
 # to authorize any user who has authenticated to the web server.
 
 
-#authorized_for_all_services=nagiosadmin,guest
-#authorized_for_all_hosts=nagiosadmin,guest
+authorized_for_all_services=*
+authorized_for_all_hosts=*
 
 
 
 # GLOBAL HOST/SERVICE COMMAND ACCESS
 # These two options are comma-delimited lists of all usernames that
 # can issue host or service related commands via the command
-# CGI (cmd.cgi) for all hosts and services that are being monitored. 
-# By default, users can only issue commands for hosts or services 
-# that they are contacts for (unless you you choose to not use 
+# CGI (cmd.cgi) for all hosts and services that are being monitored.
+# By default, users can only issue commands for hosts or services
+# that they are contacts for (unless you you choose to not use
 # authorization).  You may use an asterisk (*) to authorize any
 # user who has authenticated to the web server.
 
-#authorized_for_all_service_commands=nagiosadmin
-#authorized_for_all_host_commands=nagiosadmin
+authorized_for_all_service_commands=*
+authorized_for_all_host_commands=*
 
 
 
 
 # STATUSMAP BACKGROUND IMAGE
-# This option allows you to specify an image to be used as a 
+# This option allows you to specify an image to be used as a
 # background in the statusmap CGI.  It is assumed that the image
-# resides in the HTML images path (i.e. /usr/local/nagios/share/images).
+# resides in the HTML images path (i.e. /usr/share/nagios/images).
 # This path is automatically determined by appending "/images"
 # to the path specified by the 'physical_html_path' directive.
 # Note:  The image file may be in GIF, PNG, JPEG, or GD2 format.
@@ -217,9 +217,9 @@
 
 
 # STATUSWRL INCLUDE
-# This option allows you to include your own objects in the 
+# This option allows you to include your own objects in the
 # generated VRML world.  It is assumed that the file
-# resides in the HTML path (i.e. /usr/local/nagios/share).
+# resides in the HTML path (i.e. /usr/share/nagios).
 
 #statuswrl_include=myworld.wrl
 
@@ -237,13 +237,13 @@
 # OS and distribution, so you may have to tweak this to
 # work on your system.
 
-ping_syntax=/bin/ping -n -U -c 5 $HOSTADDRESS$
+ping_syntax=/usr/bin/ping -n -U -c 5 $HOSTADDRESS$
 
 
 
 # REFRESH RATE
 # This option allows you to specify the refresh rate in seconds
-# of various CGIs (status, statusmap, extinfo, and outages).  
+# of various CGIs (status, statusmap, extinfo, and outages).
 
 refresh_rate=90
 
@@ -264,7 +264,7 @@
 # <varname>=<sound_file>
 #
 # Note: All audio files must be placed in the /media subdirectory
-# under the HTML path (i.e. /usr/local/nagios/share/media/).
+# under the HTML path (i.e. /usr/share/nagios/media).
 
 #host_unreachable_sound=hostdown.wav
 #host_down_sound=hostdown.wav
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ ./sample-config/checkcommands.cfg	2005-05-08 18:17:19.000000000 +0300
@@ -0,0 +1,257 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+
+################################################################################
+# COMMAND DEFINITIONS
+#
+# SYNTAX:
+#
+#	define command {
+#		template	<templatename>
+#		name		<objectname>
+#		command_name	<commandname>
+#		command_line	<commandline>
+#	}
+#
+# WHERE:
+#
+# <templatename> = object name of another command definition that should be
+#                  used as a template for this definition (optional)
+# <objectname>   = object name of command definition, referenced by other
+#                  command definitions that use it as a template (optional)
+# <commandname>  = name of the command, as recognized/used by Nagios
+# <commandline>  = command line
+#
+################################################################################
+
+
+
+
+################################################################################
+#
+# SERVICE CHECK COMMANDS
+#
+################################################################################
+
+
+# 'check_tcp' command definition
+define command {
+	command_name	check_tcp
+	command_line	$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$
+}
+
+# 'check_udp' command definition
+define command {
+	command_name	check_udp
+	command_line	$USER1$/check_udp -H $HOSTADDRESS$ -p $ARG1$
+}
+
+# 'check_ftp' command definition
+define command {
+	command_name	check_ftp
+	command_line	$USER1$/check_ftp -H $HOSTADDRESS$
+}
+
+# 'check_pop' command definition
+define command {
+	command_name	check_pop
+	command_line	$USER1$/check_pop -H $HOSTADDRESS$
+}
+
+# 'check_smtp' command definition
+define command {
+	command_name	check_smtp
+	command_line	$USER1$/check_smtp -H $HOSTADDRESS$
+}
+
+# 'check_nntp' command definition
+define command {
+	command_name	check_nntp
+	command_line	$USER1$/check_nntp -H $HOSTADDRESS$
+}
+
+# 'check_http' command definition
+define command {
+	command_name	check_http
+	command_line	$USER1$/check_http -H $HOSTADDRESS$
+}
+
+# 'check_http' with port support
+define command {
+	command_name	check_http_port
+	command_line	$USER1$/check_http -H $HOSTADDRESS$ -p $ARG1$
+}
+
+# check http service with URI
+define command {
+	command_name	check_http_uri
+	command_line	$USER1$/check_http -I $HOSTADDRESS$ -H $ARG1$ -u $ARG2$
+}
+
+define command {
+	command_name	check_http_uri_string
+	command_line	$USER1$/check_http -I $HOSTADDRESS$ -H $ARG1$ -p $ARG2$ -u $ARG3$ -s '$ARG4$'
+}
+
+# check http service with URI and expect regex
+define command {
+	command_name	check_http_regex
+	command_line	$USER1$/check_http -I $HOSTADDRESS$ -H $ARG1$ -u $ARG2$ -r $ARG3$
+}
+
+define command {
+	command_name	check_https
+	command_line	$USER1$/check_http -I $HOSTADDRESS$ -H $ARG1$ -S
+}
+
+define command {
+	command_name	check_https_string
+	command_line	$USER1$/check_http -I $HOSTADDRESS$ -H $ARG1$ -S -s '$ARG2$'
+}
+
+# 'check_telnet' command definition
+define command {
+	command_name	check_telnet
+	command_line	$USER1$/check_tcp -H $HOSTADDRESS$ -p 23
+}
+
+# Generic command to check a device by pinging it
+define command {
+	command_name	check_ping
+	command_line	$USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5
+}
+
+# 'check_dns' command definition
+define command {
+	command_name	check_dns
+	command_line	$USER1$/check_dns -s $HOSTADDRESS$ -H www.yahoo.com
+}
+
+define command {
+	command_name	check_dns_custom
+	command_line	$USER1$/check_dns -s $HOSTADDRESS$ -H $ARG1$
+}
+
+# check if DNSBL is returning success on test record 127.0.0.2
+define command {
+	command_name	check_dnsbl
+	command_line	$USER1$/check_dns -s $HOSTADDRESS$ -H 2.0.0.127.$ARG1$ -a 127.0.0.2
+}
+
+# 'check_hpjd' command definition
+define command {
+	command_name	check_hpjd
+	command_line	$USER1$/check_hpjd -H $HOSTADDRESS$ -C public
+}
+
+# Command used to check disk space usage on local partitions
+define command {
+	command_name	check_local_disk
+	command_line	$USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
+}
+
+# Command used to check the number of currently logged in users on the
+# local machine
+define command {
+	command_name	check_local_users
+	command_line	$USER1$/check_users -w $ARG1$ -c $ARG2$
+}
+
+# Command to check the number of running processing on the local machine
+define command {
+	command_name	check_local_procs
+	command_line	$USER1$/check_procs -w $ARG1$ -c $ARG2$ -s $ARG3$
+}
+
+# Command to check the load on the local machine
+define command {
+	command_name	check_local_load
+	command_line	$USER1$/check_load -w $ARG1$ -c $ARG2$
+}
+
+# 'check_ssh' command definition
+define command {
+	command_name	check_ssh
+	command_line 	$USER1$/check_ssh $HOSTADDRESS$
+}
+
+# 'check_mysql' command definition
+# uses $USER3$ and $USER4$ from resources.cfg for authentication
+define command {
+	command_name	check_mysql
+	command_line	$USER1$/check_mysql -H $ARG1$ -u $USER3$ -p $USER4$ -P$ARG2$
+}
+
+define command {
+	command_name	check_mysql-slave
+	command_line	$USER1$/check_mysql -H $ARG1$ -u $USER3$ -p $USER4$ -P$ARG2$ -S
+}
+
+# check secure imap
+define command {
+	command_name	check_imaps
+	command_line	$USER1$/check_simap -H $HOSTADDRESS$
+}
+
+# check for ircd
+define command {
+	command_name	check_ircd
+	command_line	$USER1$/check_ircd -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$
+}
+
+# check for SNMPd
+# $USER5$ is used for SNMP v1 community string
+define command {
+	command_name	check_snmpd
+	command_line	$USER1$/check_snmp -H $HOSTADDRESS$ -C $USER5$ -o system.sysName.0 -P 1
+}
+
+# check any SNMP OID
+# $ARG1$ OID
+# $ARG2$ Critical Level
+# $ARG3$ warning Level
+define command {
+	command_name	check_snmp
+	command_line	$USER1$/check_snmp -H $HOSTADDRESS$ -C $USER5$ -P 1 -o $ARG1$ -w $ARG2$ -c $ARG3$
+}
+
+# check via SNMP 'proc' directives
+define command {
+	command_name	check_snmp_proc
+	command_line	$USER1$/check_snmp_proc -H $HOSTADDRESS$ -C $USER5$
+}
+
+# check for disk with nagios-snmp-plugins
+# $USER5$ is used for SNMP v1 community string
+define command {
+	command_name	check_snmp_disk
+	command_line	$USER1$/check_snmp_disk -H $HOSTADDRESS$ -C $USER5$
+}
+
+# check for spamassassin spamd
+define command {
+	command_name	check_spamd
+	command_line	$USER1$/check_tcp -H $HOSTNAME$ -p 783 -s 'PING SPAMC/1.0' -e 'PONG'
+}
+
+################################################################################
+#
+# HOST CHECK COMMANDS
+#
+################################################################################
+
+# This command checks to see if a host is "alive" by pinging it
+# The check must result in a 100% packet loss or 5 second (5000ms) round trip
+# average time to produce a critical error.
+# Note: Only one ICMP echo packet is sent (determined by the '-p 1' argument)
+
+# Command to check to see if a host is "alive" (up) by pinging it
+define command {
+	command_name	check-host-alive
+	command_line	$USER1$/check_ping -H $HOSTADDRESS$ -w 100,99% -c 5000,100% -p 1
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/contactgroups.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,19 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# CONTACT GROUP DEFINITIONS
+#
+################################################################################
+
+# We only have one contact in this simple configuration file, so there is
+# no need to create more than one contact group.
+define contactgroup {
+        contactgroup_name       admins
+        alias                   Nagios Administrators
+	members			nagios-admin
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/contacts.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,29 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# CONTACT DEFINITIONS
+#
+################################################################################
+
+# In this simple config file, a single contact will receive all alerts.
+define contact {
+	contact_name			nagios-admin
+	alias				Nagios Admin
+
+	service_notification_period	24x7
+	host_notification_period	24x7
+
+        service_notification_options    w,u,c,r
+        host_notification_options       d,r
+
+        service_notification_commands   notify-by-email
+        host_notification_commands      host-notify-by-email
+
+	email				root@localhost
+	pager				root@localhost
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/dependencies.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,16 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# SERVICE DEPENDENCY DEFINITIONS
+#
+################################################################################
+
+################################################################################
+# HOST DEPENDENCY DEFINITIONS
+#
+################################################################################
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/escalations.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,19 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# SERVICE ESCALATION DEFINITIONS
+#
+################################################################################
+
+################################################################################
+# HOSTGROUP ESCALATION DEFINITIONS
+#
+################################################################################
+
+################################################################################
+# HOST ESCALATION DEFINITIONS
+#
+################################################################################
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/hostextinfo.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,41 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# EXTENDED HOST INFORMATION
+#
+# Extended host information entries are basically used to make the output from
+# the status, statusmap, statuswrl, and extinfo CGIs look pretty. They have no
+# effect on monitoring and are completely optional.
+#
+# SYNTAX:
+# define hostextinfo {
+#	host_name	host_name
+#	notes		note_string
+#	notes_url	url
+#	action_url	url
+#	icon_image	image_file
+#	icon_image_alt	alt_string
+#	vrml_image	image_file
+#	statusmap_image	image_file
+#	2d_coords	x_coord,y_coord
+#	3d_coords	x_coord,y_coord,z_coord
+# }
+#
+# http://nagios.sourceforge.net/docs/2_0/xodtemplate.html#hostextinfo
+################################################################################
+
+define hostextinfo {
+	host_name		localhost
+	notes			PLD Linux server
+	icon_image		base/pld.png
+	icon_image_alt		PLD Ac
+	vrml_image		base/pld.png
+	statusmap_image		base/pld.gd2
+	2d_coords		100,250
+	3d_coords		100.0,50.0,75.0
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/hostgroups.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,19 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# HOST GROUP DEFINITIONS
+#
+################################################################################
+
+# We only have one host in our simple config file, so there is no need to
+# create more than one hostgroup.
+define hostgroup {
+	hostgroup_name	test
+	alias		Linux Servers
+	members		localhost
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/hosts.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,47 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# HOST DEFINITIONS
+#
+################################################################################
+
+# Generic host definition template - This is NOT a real host, just a template!
+define host {
+	name				generic-host	; The name of this host template
+							; - referenced in other host definitions,
+							;   used for template recursion/resolution
+	notifications_enabled		1		; Host notifications are enabled
+	event_handler_enabled		1		; Host event handler is enabled
+	flap_detection_enabled		1		; Flap detection is enabled
+        failure_prediction_enabled      1       	; Failure prediction is enabled
+	process_perf_data		1		; Process performance data
+	retain_status_information	1		; Retain status information across program restarts
+	retain_nonstatus_information	1		; Retain non-status information across program restarts
+
+	register			0		; DONT REGISTER THIS DEFINITION
+							; - ITS NOT A REAL HOST, JUST A TEMPLATE!
+}
+
+# Since this is a simple configuration file, we only monitor one host - the
+# local host (this machine).
+define host {
+	use			generic-host		; Name of host template to use
+
+        host_name               localhost
+	alias			Linux Server
+	address			127.0.0.1
+
+	check_command		check-host-alive
+	max_check_attempts	10
+
+        notification_interval   120
+	notification_period	24x7
+        notification_options    d,r
+
+	contact_groups		admins
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ ./sample-config/misccommands.cfg	2005-05-08 19:09:09.000000000 +0300
@@ -0,0 +1,91 @@
+################################################################################
+# Object config file for Nagios
+#
+################################################################################
+
+
+################################################################################
+# COMMAND DEFINITIONS
+#
+# SYNTAX:
+#
+#	define command {
+#		template      <templatename>
+#		name          <objectname>
+#		command_name  <commandname>
+#		command_line  <commandline>
+#	}
+#
+# WHERE:
+#
+# <templatename> = object name of another command definition that should be
+#                  used as a template for this definition (optional)
+# <objectname>   = object name of command definition, referenced by other
+#                  command definitions that use it as a template (optional)
+# <commandname>  = name of the command, as recognized/used by Nagios
+# <commandline>  = command line
+#
+################################################################################
+
+
+
+
+################################################################################
+#
+# NOTIFICATION COMMANDS
+#
+# This is a sample service notification command that can be used to send email
+# notifications (about service alerts) to contacts.
+#
+################################################################################
+
+
+# This is a sample service notification command that can be used to send email
+# notifications (about service alerts) to contacts.
+define command {
+	command_name	notify-by-email
+	command_line	/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$" | /bin/mail -s "** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
+}
+
+# 'notify-by-epager' command definition
+define command {
+	command_name	notify-by-epager
+	command_line	/bin/printf "%b" "Service: $SERVICEDESC$\nHost: $HOSTNAME$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\nInfo: $SERVICEOUTPUT$\nDate: $LONGDATETIME$" | /bin/mail -s "$NOTIFICATIONTYPE$: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$" $CONTACTPAGER$
+}
+
+# This is a sample host notification command that can be used to send email
+# notifications (about host alerts) to contacts.
+define command {
+	command_name	host-notify-by-email
+	command_line	/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\n\nDate/Time: $LONGDATETIME$\n" | /bin/mail -s "Host $HOSTSTATE$ alert for $HOSTNAME$!" $CONTACTEMAIL$
+}
+
+# 'host-notify-by-epager' command definition
+define command {
+	command_name	host-notify-by-epager
+	command_line	/bin/printf "%b" "Host '$HOSTALIAS$' is $HOSTSTATE$\nInfo: $HOSTOUTPUT$\nTime: $LONGDATETIME$" | /bin/mail -s "$NOTIFICATIONTYPE$ alert - Host $HOSTNAME$ is $HOSTSTATE$" $CONTACTPAGER$
+}
+
+################################################################################
+#
+# PERFORMANCE DATA COMMANDS
+#
+# These are sample performance data commands that can be used to send performance
+# data output to two text files (one for hosts, another for services).  If you
+# plan on simply writing performance data out to a file, consider compiling
+# Nagios with native file support for performance data.  This is done by
+# supplying the --with-file-perfdata option to the configure script.
+#
+################################################################################
+
+# 'process-host-perfdata' command definition
+define command {
+	command_name	process-host-perfdata
+	command_line	/bin/printf "%b" "$LASTHOSTCHECK$\t$HOSTNAME$\t$HOSTSTATE$\t$HOSTATTEMPT$\t$HOSTSTATETYPE$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$" >> /var/lib/nagios/host-perfdata.out
+}
+
+# 'process-service-perfdata' command definition
+define command {
+	command_name	process-service-perfdata
+	command_line	/bin/printf "%b" "$LASTSERVICECHECK$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICESTATE$\t$SERVICEATTEMPT$\t$SERVICESTATETYPE$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$" >> /var/lib/nagios/service-perfdata.out
+}
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/services.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,121 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# SERVICE DEFINITIONS
+#
+################################################################################
+
+# Generic service definition template
+define service {
+	name				generic-service	; The 'name' of this service template,
+							; referenced in other service definitions
+	active_checks_enabled		1		; Active service checks are enabled
+	passive_checks_enabled		1		; Passive service checks are enabled/accepted
+	parallelize_check		1		; Active service checks should be parallelized (disabling this can lead to major performance problems)
+	obsess_over_service		1		; We should obsess over this service (if necessary)
+	check_freshness			0		; Default is to NOT check service 'freshness'
+	notifications_enabled		1		; Service notifications are enabled
+	event_handler_enabled		1		; Service event handler is enabled
+	flap_detection_enabled		1		; Flap detection is enabled
+	failure_prediction_enabled	1		; Failure prediction is enabled
+	process_perf_data		1		; Process performance data
+	retain_status_information	1		; Retain status information across program restarts
+	retain_nonstatus_information	1		; Retain non-status information across program restarts
+
+	register			0		; DONT REGISTER THIS DEFINITION
+							; - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
+}
+
+# Define a service to "ping" the local machine
+# Define a service to "ping" the local machine
+
+define service {
+	use			generic-service		; Name of service template to use
+	host_name		localhost
+	service_description	PING
+	is_volatile		0
+	check_period		24x7
+	max_check_attempts	4
+	normal_check_interval	5
+	retry_check_interval	1
+	contact_groups		admins
+	notification_interval	960
+	notification_period	24x7
+	check_command		check_ping!100.0,20%!500.0,60%
+}
+
+# Define a service to check the disk space of the root partition
+# on the local machine.  Warning if < 20% free, critical if
+# < 10% free space on partition.
+define service {
+	use			generic-service		; Name of service template to use
+	host_name		localhost
+	service_description	Root Partition
+	is_volatile		0
+	check_period		24x7
+	max_check_attempts	4
+	normal_check_interval	5
+	retry_check_interval	1
+	contact_groups		admins
+	notification_interval	960
+	notification_period	24x7
+	check_command		check_local_disk!20%!10%!/
+}
+
+# Define a service to check the number of currently logged in
+# users on the local machine.  Warning if > 20 users, critical
+# if > 50 users.
+define service {
+	use			generic-service		; Name of service template to use
+	host_name		localhost
+	service_description	Current Users
+	is_volatile		0
+	check_period		24x7
+	max_check_attempts	4
+	normal_check_interval	5
+	retry_check_interval	1
+	contact_groups		admins
+	notification_interval	960
+	notification_period	24x7
+	check_command		check_local_users!20!50
+}
+
+# Define a service to check the number of currently running procs
+# on the local machine.  Warning if > 250 processes, critical if
+# > 400 users.
+define service {
+	use			generic-service		; Name of service template to use
+	host_name		localhost
+	service_description	Total Processes
+	is_volatile		0
+	check_period		24x7
+	max_check_attempts	4
+	normal_check_interval	5
+	retry_check_interval	1
+	contact_groups		admins
+	notification_interval	960
+	notification_period	24x7
+	check_command		check_local_procs!250!400
+}
+
+
+# Define a service to check the load on the local machine.
+define service {
+	use			generic-service		; Name of service template to use
+	host_name		localhost
+	service_description	Current Load
+	is_volatile		0
+	check_period		24x7
+	max_check_attempts	4
+	normal_check_interval	5
+	retry_check_interval	1
+	contact_groups		admins
+	notification_interval	960
+	notification_period	24x7
+	check_command		check_local_load!5.0,4.0,3.0!10.0,6.0,4.0
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ nagios-2.0b3.fuu/sample-config/timeperiods.cfg	2005-05-04 14:24:24.000000000 +0300
@@ -0,0 +1,73 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# TIMEPERIOD DEFINITIONS
+#
+################################################################################
+
+# This defines a timeperiod where all times are valid for checks,
+# notifications, etc.  The classic "24x7" support nightmare. :-)
+define timeperiod {
+	timeperiod_name	24x7
+	alias		24 Hours A Day, 7 Days A Week
+
+	monday		00:00-24:00
+	tuesday		00:00-24:00
+	wednesday	00:00-24:00
+	thursday	00:00-24:00
+	friday		00:00-24:00
+	saturday	00:00-24:00
+	sunday		00:00-24:00
+}
+
+# 'workhours' timeperiod definition
+define timeperiod {
+	timeperiod_name	workhours
+	alias		"Normal" Working Hours
+
+	monday		09:00-17:00
+	tuesday		09:00-17:00
+	wednesday	09:00-17:00
+	thursday	09:00-17:00
+	friday		09:00-17:00
+}
+
+
+# 'nonworkhours' timeperiod definition
+define timeperiod {
+	timeperiod_name	nonworkhours
+	alias		Non-Work Hours
+
+	monday		00:00-09:00,17:00-24:00
+	tuesday		00:00-09:00,17:00-24:00
+	wednesday	00:00-09:00,17:00-24:00
+	thursday	00:00-09:00,17:00-24:00
+	friday		00:00-09:00,17:00-24:00
+	saturday	00:00-24:00
+	sunday		00:00-24:00
+}
+
+define timeperiod {
+	timeperiod_name	daytime
+	alias		Working Hours and Afternoon
+
+	monday		09:00-23:50
+	tuesday		09:00-23:50
+	wednesday	09:00-23:50
+	thursday	09:00-23:50
+	friday		09:00-23:50
+	saturday	09:00-23:50
+	sunday		09:00-23:50
+}
+
+
+# 'none' timeperiod definition
+define timeperiod {
+	timeperiod_name	none
+	alias		No Time Is A Good Time
+}
+
+# vim:ts=8:sw=8
--- /dev/null	2005-02-16 21:06:48.000000000 +0200
+++ ./sample-config/serviceextinfo.cfg	2005-05-08 18:45:45.000000000 +0300
@@ -0,0 +1,35 @@
+################################################################################
+# object config file for Nagios
+#
+################################################################################
+
+################################################################################
+# EXTENDED SERVICE INFORMATION
+#
+# Extended service information entries are basically used to make the output
+# from the status and extinfo CGIs look pretty. They have no effect on
+# monitoring and are completely optional.
+#
+# SYNTAX:
+# define serviceextinfo {
+#	host_name		host_name
+#	service_description	service_description
+#	notes			note_string
+#	notes_url		url
+#	action_url		url
+#	icon_image		image_file
+#	icon_image_alt		alt_string
+# }
+# http://nagios.sourceforge.net/docs/2_0/xodtemplate.html#serviceextinfo
+################################################################################
+
+#define serviceextinfo {
+#	host_name		localhost
+#	service_description	Log Anomalies
+#	notes			Security-related log anomalies on secondary Linux server
+#	notes_url		http://webserver.localhost.localdomain/serviceinfo.pl?host=linux2&service=Log+Anomalies
+#	icon_image		security.png
+#	icon_image_alt		Security-Related Alerts
+#}
+
+# vim:ts=8:sw=8
